{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/code.directive.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div id=\\\"container\\\">\\n  <div class=\\\"header\\\" [style.height.px]=\\\"headerHeight\\\">\\n    <img src=\\\"../assets/testy_white.svg\\\" />\\n    <div id=\\\"tagline\\\" *ngIf=\\\"headerHeight > 175\\\">\\n      The modern TypeScript testing framework.\\n    </div>\\n  </div>\\n\\n  <div id=\\\"content\\\" [style.padding-top.px]=\\\"contentPaddingTop + 48\\\">\\n    <div class=\\\"panel\\\">\\n      <h1> What is Testy.Ts? </h1>\\n\\n      Testy.Ts is a modern TypeScript testing framework.\\n    </div>\\n\\n    <div class=\\\"panel\\\">\\n      \\n      <h1>Installation</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          To install Testy.Ts, run one of the following lines.\\n        </div>\\n\\n        <div class=\\\"right\\\">\\n          <pre class=console>\\n$ npm i --save-dev testyts <span class=comment>// To install locally</span>\\n$ npm i -g testyts <span class=comment>// To install globally</span></pre>\\n        </div>\\n      </div>\\n\\n      <h1>Setup</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          To generate a testy.json configuration file, use the following command.\\n        </div>\\n\\n        <div class=\\\"right\\\">\\n          <pre class=console>\\n$ testyts init</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Writing your first test</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          Writing tests with Testy is simple. Don't forget to export your test suites though. Otherwise, they won't be discovered by\\n          the test runner.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\n@testSuite()\\nexport class MyTestSuite {{'{'}} \\n\\n    @test()\\n    quickMaths() {{'{'}}\\n        expect.toBeEqual(1 + 1, 2);\\n    }\\n}</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Run those tests</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          To run your Testy.Ts tests, simply run the following command. \\n          Testy.Ts uses is the \\\"testy.json\\\" file contained in the current directory by default.\\n          Testy will fail if there is no such file.\\n        </div>\\n\\n        <div class=\\\"right\\\">\\n          <pre class=console>\\n$ testyts\\n$ testyts --config ./config.json <span class=comment>// Custom config file</span></pre>\\n        </div>\\n      </div>\\n\\n      <h1>Setup and teardown methods</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          TestyTs provides setup and teardown hooks.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\n@testSuite()\\nexport class MyTestSuite {{'{'}}\\n  \\n    @beforeAll()\\n    beforeAll() {{'{'}}\\n        // This is executed before all the tests\\n    }\\n  \\n    @beforeEach()\\n    beforeEach() {{'{'}}\\n        // This is executed before each test\\n    }\\n  \\n    @afterEach()\\n    afterEach() {{'{'}}\\n        // This is executed after each test\\n    }\\n    \\n    @afterAll()\\n    afterAll() {{'{'}}\\n        // This is executed after all the tests\\n    }\\n}</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Base test suites</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          Okay, this is where stuff gets interesting. TestyTs lets you use inheritance. This means you don't have to duplicate complex\\n          setup, teardown and helper functions. You also don't have to put fifty tests in the same class.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\nclass MyBaseTestSuite {{'{'}}\\n    // Setup, teardown and helpers extravaganza\\n}\\n  \\n@testSuite()\\nclass MyTestSuite extends MyBaseTestSuite {{'{'}}\\n    // My tests\\n}</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Testcases</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          Testy.Ts allows you to run the same test multiple times with different inputs and expectations. Just pass an array of TestCases\\n          to the test decorator.\\n\\n          <br>\\n          <br> A TestCase consists of a name and one or more arguments. The arguments are passed to your test method.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\n@testSuite()\\nexport class MyTestSuite {{'{'}}\\n\\n    @test('My test', [\\n          new TestCase('Two plus two is four', 2, 2, 4),\\n          new TestCase(`Minus one that's three`, 4, -1, 3)\\n    ])\\n    onePlusOne(a: number, b: number, result: number) {{'{'}}\\n        expect.toBeEqual(a + b, result);\\n    }\\n}</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Asserting</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          Testy.Ts comes with a whole bunch of assertion methods and also a dash of syntactic sugar sexyness.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\nexpect.toBeTrue(2 > 1);\\nexpect.toBeEqual('a', 'a');\\nexpect.not.toBeEqual('p', 'np');\\nexpect.toThrow(() => someNastyMethod());\\nexpect.toBeSorted.inAscendingOrder([0, 1, 1, 2, 3, 5, 8]);\\n// More!</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Focusing and ignoring tests</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          You can ignore tests by adding an x before a test suite or a specific test decorator. Ignored tests will still show up in\\n          the test report, but they will be marked as ignored.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\n@xtestSuite() // This test suite will be ignored\\nexport class MyTestSuite {{'{'}} \\n  // My tests\\n}\\n  \\n@testSuite()\\nexport class MyTestSuite {{'{'}}\\n\\n    @xtest() // This test will be ignored\\n    onePlusOne() {{'{'}}\\n        // Some test\\n    }\\n}</pre>\\n        </div>\\n\\n        <div class=\\\"left\\\">\\n          You can also focus tests by adding an f before a test suite or a specific test decorator. If one test or test suites are\\n          focused, only those will be runned. The others will be reported as ignored.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\n  @ftestSuite() // This test suite will be focused\\n  export class MyTestSuite {{'{'}} \\n    // My tests\\n  }\\n    \\n  @testSuite()\\n  export class MyTestSuite {{'{'}}\\n  \\n      @ftest() // This test will be focused\\n      onePlusOne() {{'{'}}\\n          // Some test\\n      }\\n  }</pre>\\n        </div>\\n      </div>\\n\\n      <h1>Custom test names</h1>\\n      <div class=\\\"grid\\\">\\n        <div class=\\\"left\\\">\\n          The tests and test suites names are inferred from the method or class name by default. You can specify a custom name if you're into that.\\n        </div>\\n        <div class=\\\"right\\\">\\n          <pre code>\\n@testSuite('My glorious test suite')\\nexport class MyTestSuite {{'{'}}\\n  \\n    @test('Adding one plus one, should equal two')\\n    onePlusOne() {{'{'}}\\n        // Assert\\n        expect.toBeEqual(1 + 1, 2);\\n    }\\n}</pre>\\n        </div>\\n      </div>\\n\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"* {\\n  box-sizing: border-box;\\n  font-family: 'Montserrat';\\n  font-size: 100%; }\\n  @media screen and (max-width: 700px) {\\n    * {\\n      font-size: 24px; } }\\n  #container {\\n  width: 100%; }\\n  #content {\\n  max-width: 1000px;\\n  min-width: 700px;\\n  margin: 0 auto; }\\n  #content .panel {\\n    overflow: visible;\\n    margin-bottom: 2em;\\n    line-height: 2em;\\n    margin: 0 25px 20px 25px; }\\n  .grid {\\n  margin-bottom: 30px; }\\n  @media screen and (min-width: 700px) {\\n  .panel .grid {\\n    display: -ms-grid;\\n    display: grid;\\n    -ms-grid-columns: 45% auto;\\n    grid-template-columns: 45% auto;\\n    gap: 30px;\\n    text-align: justify; } }\\n  .header {\\n  position: fixed;\\n  width: 100%;\\n  color: white;\\n  background: linear-gradient(45deg, #009b55 0%, #0e753f 100%);\\n  padding: 4px 20%;\\n  box-shadow: 0px -2px 12px rgba(0, 0, 0, 0.75);\\n  text-align: center; }\\n  .header #tagline {\\n    margin-left: 20px;\\n    font-size: 1.25em; }\\n  @media screen and (max-width: 700px) {\\n      .header #tagline {\\n        margin-left: 10px;\\n        font-size: 1em; } }\\n  .header img {\\n    text-align: left;\\n    height: 100%;\\n    min-width: 100px;\\n    min-height: 20px;\\n    max-width: 100%;\\n    max-height: 175px; }\\n  h1 {\\n  font-size: 1.5em;\\n  line-height: 2.25rem;\\n  font-weight: 600;\\n  margin-bottom: 0.33rem; }\\n  pre {\\n  background-color: #232323;\\n  color: white;\\n  font-family: UbuntuMono;\\n  line-height: 1.25em;\\n  border-radius: 6px;\\n  padding: 0.66rem;\\n  width: 100%;\\n  overflow-x: auto; }\\n  pre .comment {\\n    font-family: UbuntuMono;\\n    -webkit-user-select: none;\\n       -moz-user-select: none;\\n        -ms-user-select: none;\\n            user-select: none;\\n    color: #b4b4b4;\\n    background-color: transparent; }\\n\"","import { Component, OnInit, HostListener, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { interval } from 'rxjs';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n    private readonly minHeaderHeight = 48;\n    private readonly minPaddingTop = 100;\n    private readonly maxHeaderHeight = 225;\n\n    public scrollOffset = 0;\n    public headerHeight = this.maxHeaderHeight;\n    public contentPaddingTop = this.maxHeaderHeight;\n\n    constructor(@Inject(DOCUMENT) private document: Document) {\n\n    }\n\n    ngOnInit(): void {\n        interval(10).subscribe(() => this.adjustHeader());\n    }\n\n    private adjustHeader() {\n        const headerHeightTarget = this.scrollOffset < 4 ? this.maxHeaderHeight : this.minHeaderHeight;\n        this.headerHeight = this.lerp(this.headerHeight, headerHeightTarget, 0.05);\n\n        const paddingTopTarget = this.scrollOffset < 4 ? this.maxHeaderHeight : this.minPaddingTop;\n        this.contentPaddingTop = this.lerp(this.contentPaddingTop, paddingTopTarget, 0.05);\n    }\n\n    private lerp(a, b, t) {\n        return a + t * (b - a);\n    }\n\n    @HostListener('window:scroll', [])\n    onWindowScroll() {\n        this.scrollOffset = this.document.documentElement.scrollTop || this.document.body.scrollTop || 0;\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { CodeDirective } from './code.directive';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        CodeDirective\n    ],\n    imports: [\n        BrowserModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Input, AfterViewInit, ElementRef, HostListener, Directive } from '@angular/core';\nimport * as highlight from 'highlight.js';\n\n@Directive({\n    selector: '[code]'\n})\n\nexport class CodeDirective implements AfterViewInit {\n\n    private el: HTMLElement;\n\n    constructor(public element: ElementRef) {\n        this.el = element.nativeElement;\n    }\n\n    ngAfterViewInit(): void {\n        this.toMarkdown();\n    }\n\n    private toMarkdown() {\n        this.el.innerHTML = highlight.highlight('typescript', this.el.innerText).value;\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}